/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Spinning code by: Max Tyson
*/

import React, {useEffect, useRef, useState} from "react";
import {useGLTF} from "@react-three/drei";
import {useFrame} from "@react-three/fiber";
import {GLTF} from "three-stdlib";
import * as THREE from "three";
import {Mesh} from "three";

// Define the type for the GLTFResult
type GLTFResult = GLTF & {
    nodes: {
        Matteuccia_struthiopteris__A001: THREE.Mesh
        Matteuccia_struthiopteris__B001: THREE.Mesh
        Matteuccia_struthiopteris__C001: THREE.Mesh
    }
    materials: {
        leaf: THREE.MeshStandardMaterial
    }
}


/**
 * The 3D model of the plant, loaded from a GLTF file.
 *
 * @param {Object} props - Component props.
 * @param {any} props - The props for the group element.
 *
 * @returns {JSX.Element} The rendered plant model component.
 */
export function PlantModel(props: any) {
    const { nodes, materials } = useGLTF("/data/plant.glb") as GLTFResult;

    // Store the pieces of the plant model for later use
    const plantModelRef1 = useRef<Mesh>(null!);
    const plantModelRef2 = useRef<Mesh>(null!);
    const plantModelRef3 = useRef<Mesh>(null!);

    // Values for the rotation speed and scroll speed
    const rotationSpeed = 0.0002;
    const [scrollSpeed, setScrollSpeed] = useState(0);

    // Call the useFrame hook to update the plant model on each frame
    useFrame(() => {

        // Rotate each part of the plant model based on the scroll speed and how much it should rotate

        if (plantModelRef1.current) {
            plantModelRef1.current.rotation.y += scrollSpeed * rotationSpeed;
        }

        if (plantModelRef2.current) {
            plantModelRef2.current.rotation.y += scrollSpeed * rotationSpeed;
        }

        if (plantModelRef3.current) {
            plantModelRef3.current.rotation.y += scrollSpeed * rotationSpeed;
        }

        // Slowly decrease the scroll speed over time to make the plant model stop spinning after stopping scrolling
        setScrollSpeed((prevScrollSpeed) => prevScrollSpeed * 0.95);

    });

    // Add an event listener to the window to detect scrolling
    useEffect(() => {


        const handleScroll = (event: Event) => {
            // Get the scroll delta from the event
            const delta = (event as WheelEvent).deltaY;

            // Update the scroll speed based on the scroll delta
            setScrollSpeed((prevScrollSpeed) => prevScrollSpeed + delta);
        };

        // Add the event listener
        window.addEventListener("wheel", handleScroll);

        // Remove the event listener when the component is unmounted
        return () => {
            window.removeEventListener("wheel", handleScroll);
        };
    }, []);

    return (
        <group {...props} dispose={null} >
            <mesh
                castShadow={true}
                receiveShadow={true}
                geometry={nodes.Matteuccia_struthiopteris__A001.geometry}
                material={materials.leaf}
                ref={plantModelRef1}
            />
            <mesh
                castShadow={true}
                receiveShadow={true}
                geometry={nodes.Matteuccia_struthiopteris__B001.geometry}
                material={materials.leaf}
                ref={plantModelRef2}
            />
            <mesh
                castShadow={true}
                receiveShadow={true}
                geometry={nodes.Matteuccia_struthiopteris__C001.geometry}
                material={materials.leaf}
                ref={plantModelRef3}
            />
        </group>
    );
}

useGLTF.preload("/data/plant.glb");
